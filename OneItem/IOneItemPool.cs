using System;

namespace Promit.Test;

#nullable enable

/// <summary>
/// Синхронный пул одного значения.
/// В методе Dispose должно быть окончательное освобождение всех ресурсов,
/// если таковые в реализации имеются. Предполагается, что Dispose вызывается,
/// когда уже нет никаких ожидающих геттеров или постеров, и гарантируется, что
/// класс не используется никем.
/// </summary>
/// <typeparam name="T">Тип итема.</typeparam>
public interface IOneItemPool<T> : IDisposable
{
    /// <summary>
    /// Метод старта пула. Вызывается один раз, после создания инстанса пула,
    /// и до его фактического использования.
    /// Если для Вашей реализации метод не нужен, оставьте его пустым.
    /// </summary>
    void Start();

    /// <summary>
    /// Метод останова работы пула.
    /// Этот метод может быть вызван, пока пул используется.
    /// В числе прочего, этот метод должен прерывать ожидающих запостить значение,
    /// и прерывать ожидающих получить значение.
    /// Если для Вашей реализации метод не нужен, оставьте его пустым.
    /// </summary>
    void Stop();

    /// <summary>
    /// Сохраняет итем в пул. Если в пуле уже есть итем,
    /// то ждет, пока пул освободится (не возвращает управление).
    /// В случае останова пула, должно бросаться исключение InvalidOperationException, или его наследник.
    /// Этот метод может вызываться параллельно из нескольких потоков.
    /// </summary>
    /// <param name="item">Собственно, итем. Не должен быть null.</param>
    void PostItem(T item);

    /// <summary>
    /// Забирает итем из пула. Если итема нет в пуле, ждет, пока итем не появится (не возвращает управление).
    /// В случае останова пула, должно бросаться исключение InvalidOperationException, или его наследник.
    /// Этот метод может вызываться параллельно из нескольких потоков.
    /// </summary>
    /// <returns>Собственно, итем. Гарантируется, что не нулл.</returns>
    T GetItem();
}

///// <summary>
///// Асинхронный пул одного значения.
///// </summary>
///// <typeparam name="T">Тип итема.</typeparam>
//public interface IOneItemAsyncPool<T> : IOneItemPool<T>
//{
//    /// <summary>
//    /// Сохраняет итем в пул. Если в пуле уже есть итем,
//    /// то таска не завершается, пока пул освободится.
//    /// В случае останова, должно бросаться исключение OperationCancelledException.
//    /// Этот метод может вызываться параллельно из нескольких потоков.
//    /// </summary>
//    /// <param name="item">Собственно, итем. Не должен быть null.</param>
//    Task PostItemAsync(T item);

//    /// <summary>
//    /// Забирает итем из пула. Если итема нет в пуле, то таска не завершается,
//    /// пока итем не появится.
//    /// В случае останова, должно бросаться исключение OperationCancelledException.
//    /// Этот метод может вызываться параллельно из нескольких потоков.
//    /// </summary>
//    /// <returns>Собственно, итем. Гарантируется, что не нулл.</returns>
//    Task<T> GetItemAsync();
//}
